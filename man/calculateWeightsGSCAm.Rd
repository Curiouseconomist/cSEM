% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimators_weights.R
\name{calculateWeightsGSCAm}
\alias{calculateWeightsGSCAm}
\title{Calculate weights using GSCA_M}
\usage{
calculateWeightsGSCAm(
  .X                           = args_default()$.X,
  .csem_model                  = args_default()$.csem_model,
  .conv_criterion              = args_default()$.conv_criterion,
  .iter_max                    = args_default()$.iter_max,
  .starting_values             = args_default()$.starting_values,
  .tolerance                   = args_default()$.tolerance
   )
}
\arguments{
\item{.X}{A matrix of processed data (scaled, cleaned and ordered).}

\item{.csem_model}{A (possibly incomplete) \link{cSEMModel}-list.}

\item{.conv_criterion}{Character string. The criterion to use for the convergence check.
One of: "\emph{diff_absolute}", "\emph{diff_squared}", or "\emph{diff_relative}". Defaults
to "\emph{diff_absolute}".}

\item{.iter_max}{Integer. The maximum number of iterations allowed.
If \code{iter_max = 1} and \code{.approach_weights = "PLS-PM"} one-step weights are returned.
If the algorithm exceeds the specified number, weights of iteration step
\code{.iter_max - 1}  will be returned with a warning. Defaults to \code{100}.}

\item{.starting_values}{list of named vectors containig the starting values.
Defaults to "\emph{NULL}".}

\item{.tolerance}{Double. The tolerance criterion for convergence.
Defaults to \code{1e-05}.}
}
\value{
A list with the elements
\describe{
\item{\code{$W}}{A (J x K) matrix of estimated weights.}
\item{\code{$E}}{A (J x J) matrix of inner weights.}
\item{\code{$Modes}}{A named vector of Modes used for the outer estimation, for GSCA
the mode is automatically set to 'gsca'.}
\item{\code{$Conv_status}}{The convergence status. \code{TRUE} if the algorithm has converged
and \code{FALSE} otherwise. If one-step weights are used via \code{.iter_max = 1}
or a non-iterative procedure was used, the convergence status is set to \code{NULL}.}
\item{\code{$Iterations}}{The number of iterations used.}
}
}
\description{
Calculates weights of a structural model using the GSCA_M procedure. This is
necessary to estimate parameters consistently when indicators are observed with
an error.
}
\details{
The GSCA_M procedure is an alternative approach to PLSc in structural equation
modeling with composites where indicators (or/and constructs) are observed with
errors. In this case parameter estimators, especially loadings, might be biased,
when using GSCA or PLS for estimation.
However, GSCA_M provides a way to estimate the parameters consistently also in
this situation. The term 'GSCA_M' stands for 'GSCA with measurement errors incorporated'.
This approach was first presented in \insertCite{Hwang2017;textual}{cSEM}.

The basic idea of GSCA_M is to model indicators in the measurement model as a
combination of common parts (arising from the constructs) and unique parts.
The purpose of adding a unique part to each indicator is to account for measurement
errors in the indicators. In a next step, latent variables are expressed in
the weighted relation model as a linear combination of indicators but with their
unique parts removed.

Together with the structural model, all three sub-models are combined to derive
one model equation. The corresponding matrices of the sub-models are provided
by the \code{.csem_model} argument. This leads to a global optimization criterion
which is minimized in order to obtain the optimal estimators for all parameters.
This is done via an iterative algorithm. Having assigned initial values to all
parameters, several alternating steps are carried out until convergence. Each
step consists essentially of regressions such that every set of parameters is
updated by a least squares calculation keeping the other parameters constant.
This algorithm is explained more detailly in the Appendix of \insertCite{Hwang2017;textual}{cSEM}.

The steps are iterated until convergence is reached or the prescribed
maximum number of iteration steps, '.iter_max', was carried out. In their example
in \insertCite{Hwang2014;textual}{cSEM}, p. 75, the authors set '.iter_max'
equal to 100 for an estimation with GSCA, but this is an arbitrary choice.
The user might try several values for '.iter_max' and eventually increase its
value if convergence happened previously due to reaching the maximum number
of steps (indicated by a \code{Conv_status} equal to \code{FALSE}).

The convergence criterion for GSCA_M is some difference of subsequent parameter
estimators involving those of loadings and path coefficients. In this case,
convergence means that this difference falls below a certain value provided by
the \code{.tolerance} argument. The default value of \code{1e-05} is the same value which
Hwang and Takane use in their example in \insertCite{Hwang2014;textual}{cSEM}, p. 75.
Nevertheless, the argument \code{.tolerance} can take any other value as well.

Parameters are automatically estimated via GSCA_M when calling \code{\link[=csem]{csem()}}. However,
if there is at least one construct which is not a common factor, but a pure composite,
parameters have to be estimated with GSCA. The reason is that the implementation
of GSCA_M in the cSEM-package is based on \insertCite{Hwang2017;textual}{cSEM}.
In the case of GSCA_M, the estimated loadings are the correlations between indicators
and proxies, not the "true" correlations between indicators and underlying but unknown
constructs.
The GSCA_M-approach presented by the authors only works out if all constructs
are of common factor type. Otherwise, i.e., if there is at least one construct
of composite type estimation using GSCA_M fails because calculating weight estimates
with GSCA_M leads to a product involving the measurement matrix. This matrix
does not have full rank in the case of at least one pure composite construct.
It has a zero row for every construct which is a pure composite (i.e. all related loadings are zero)
and, therefore, leads to a non-invertible matrix when multiplying it with its transposed.
Thus, in this case, the user imperatively has to use GSCA and GSCA_M is no option.
Otherwise, i.e., if there are only constructs which are of common factor type,
calling \code{\link[=csem]{csem()}} will lead to an estimation via GSCA_M except in the case that
the user explicitly sets the argument \code{.disattenuate} to \code{FALSE}. estimation is always done
by 'standard' GSCA.
}
\references{
\insertAllCited{}
}
